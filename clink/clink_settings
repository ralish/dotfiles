# Clink configuration
# https://chrisant996.github.io/clink/clink.html#configuring-clink
#
# Last reviewed release: v1.8.6
# Default file path: %LOCALAPPDATA%\clink\clink_settings

# ---------------------------------- Clink ------------------------------------

# Command to run in the first CMD prompt shown after Clink is injected
#
# If blank, Clink looks for "clink_start.cmd" in the binaries and profile
# directories and runs it if found. Set to "nul" to disable autostart.
clink.autostart = nul

# Frequency to check for updates
#
# Valid values:
# - off
# - check
# - prompt
# - auto
clink.autoupdate = off
# Interval between update checks (days)
clink.update_interval = 5

# Context sensitive colouring of input
clink.colorize_input = True

# Name of a ".clinkprompt" file containing prompt customisations
#clink.customprompt =

# Default key bindings
#
# Valid values:
# - bash
# - windows
clink.default_bindings = windows

# Startup logo to display when Clink is injected
#
# Valid values:
# - none
# - short
# - full
clink.logo = none

# Maximum number of rows the input line can use, up to the terminal height
#
# If set to zero, the limit is the terminal height.
clink.max_input_rows = 0

# Handling of CR and LF characters on paste
#
# Valid values:
# - ampersand
# - crlf
# - delete
# - space
clink.paste_crlf = crlf

# Paths from which to load Lua scripts (semicolon-separated)
#clink.path =

# Direction of next selection on deleting an entry in a pop-up list
#
# Valid values:
# - down
# - up
clink.popup_delete_direction = down
# Search behaviour when typing in a pop-up list
#
# Valid values:
# - filter
# - find
clink.popup_search_mode = find

# Prompt filtering by Lua scripts
clink.promptfilter = True

# Number of screen lines to show above or below a selected item in a pop-up
# list or when invoking the "clink-select-complete" command.
clink.scroll_offset = 3

# -------------------------- Automatic suggestions ----------------------------

# Display suggested commands
autosuggest.enable = True

# Generate suggestions asynchronously
autosuggest.async = True

# Display right-aligned usage hints
autosuggest.hint = True

# Use original capitalisation from suggestions
autosuggest.original_case = True

# Strategy for choosing suggestions
#
# Multiple strategies are attempted in listed order (space-separated).
#
# Valid values:
# - completion
# - history
# - match_prev_cmd
autosuggest.strategy = match_prev_cmd history completion

# --------------------------------- Colours -----------------------------------

# Default colours
#
# Input line text
color.input                     = sgr 38;5;214
# Command prompt
#color.prompt                   =

# Input line
#
# Selected text
color.selection                 = sgr 38;5;16;48;5;179
# Automatic suggestion (autosuggest.enable)
#color.suggestion               =
# Unrecognised command word
color.unrecognized              = sgr 38;5;203

# Prompts
#
# Interactive prompt
color.interact                  = bold
# Prompt message area
color.message                   = default

# Horizontal scroll indicator
color.horizscroll               = sgr 38;5;16;48;5;30

# Modified history line mark character
#color.modmark                  =

# Completions
#
# Argument information (with argmatcher)
color.arginfo                   = sgr 38;5;172
# CMD completion (also used by clink.colorize_input)
color.cmd                       = bold
# Comment row
color.comment_row               = sgr 38;5;87;48;5;18
# Common prefix of all match completions
#color.common_match_prefix      =
# Match description
color.description               = sgr 38;5;39
# DOSKEY alias (also used by clink.colorize_input)
color.doskey                    = sgr 1;38;5;75
# Filtered completion
color.filtered                  = bold
# File with "Hidden" attribute
color.hidden                    = sgr 38;5;160
# File with "Read-only" attribute
color.readonly                  = sgr 38;5;28
# Selected completion
#color.selected_completion      =

# Context sensitive input (clink.colorize_input)
#
# Command argument
#color.arg                      =
# Command name (with argmatcher)
color.argmatcher                = sgr 1;38;5;40
# Redirection symbol
color.cmdredir                  = sgr 38;5;172
# Command separator
color.cmdsep                    = sgr 38;5;135
# Command word recognised as executable file
color.executable                = sgr 1;38;5;33
# Command flag
color.flag                      = sgr 38;5;117
# History expansion
color.histexpand                = sgr 97;48;5;55
# Unexpected argument
color.unexpected                = default

# Pop-ups
#
# Lists and messages
#color.popup                    =
# Border
#color.popup_border             =
# Description column
#color.popup_desc               =
# Footer text
#color.popup_footer             =
# Header text
#color.popup_header             =
# Selected item
#color.popup_select             =
# Selected item description text
#color.popup_selectdesc         =

# Suggestion lists
#
# Suggestion
#color.suggestionlist           =
# Dim text in the list header
color.suggestionlist_dim        = sgr 38;5;242
# Highlight of matching part of suggestion
color.suggestionlist_highlight  = sgr 38;5;87
# Markup
color.suggestionlist_markup     = sgr 38;2;253;174;31
# Selected suggestion
color.suggestionlist_selected   = sgr 48;5;238

# ---------------------------- Command Processor ------------------------------

# Text to replace the "Administrator: " console title prefix
#cmd.admin_title_prefix =

# Exit on receiving Alt+F4
cmd.altf4_exits = True
# Exit on receiving Ctrl+D on an empty line
cmd.ctrld_exits = False

# Automatically answer "Terminate batch job (Y/N)?" prompts
#
# Valid values:
# - off
# - answer_no
# - answer_yes
cmd.auto_answer = off

# Retrieve last exit code for use by Lua scripts before each interactive prompt
cmd.get_errorlevel = True

# --------------------------------- History -----------------------------------

# Save command history between sessions
history.save = True

# Automatically perform history expansion on accepting a command line
history.auto_expand = True

# Commands to exclude from adding to history
#
# Entries can be space, comma, or semicolon separated.
history.dont_add_to_history_cmds = exit history

# Handling of lines which match an existing entry
#
# Valid values:
# - add
# - erase_prev
# - ignore
history.dupe_mode = erase_prev

# Interpretation of "!" character for word expansion
#
# Valid values:
# - off
# - on
# - not_quoted
# - not_squoted
# - not_dquoted
history.expand_mode = not_quoted

# Ignore lines which begin with whitespace when adding to history
history.ignore_space = True

# Maximum number of history lines to retain
#
# If set to -1, no limit is enforced on the history size.
history.max_lines = 25000

# Share history across all active instances
history.shared = False

# If the text at the cursor is subject to history expansion, show a preview of
# the expanded result below the input line.
history.show_preview = True

# When using a line from the history, do not add the line to the end of the
# history and retain the history search position so subsequent invocation of
# next/previous history line is relative to the previously used history line.
history.sticky_search = False

# Save and optionally display history timestamps
#
# Valid values:
# - off
# - save
# - show
history.time_stamp = off
# Time format string for display of timestamps
history.time_format = %F %T

# ----------------------------------- Lua -------------------------------------

# Value to append to "package.path"
#lua.path =

# Treat argument errors as fatal in scripts
lua.strict = True

# Reload scripts each time the edit prompt is activated
lua.reload_scripts = False

# Maximum duration which a coroutine can be executing (seconds)
#
# If set to zero, no limit is imposed on coroutine execution time.
lua.throttle_interval = 0

# Print stack trace on errors
lua.traceback_on_error = False

# Load a simple embedded debugger
lua.debug = False
# Break into the debugger on errors
lua.break_on_error = False
# Break into the debugger on traceback()
lua.break_on_traceback = False

# -------------------------------- Matching -----------------------------------

# Colour definitions for displaying match completions
#match.coloring_rules =

# Expand abbreviated paths before performing completion
match.expand_abbrev = True

# Expand environment variables in a word before performing completion
match.expand_envvars = True

# Calculate column widths to display as many matches as possible
match.fit_columns = True
# Maximum number of values to consider for calculating column widths
#
# If set to zero, no limit is imposed for calculating column widths.
match.max_fitted_matches = 0

# Ignore character accents when completing matches
match.ignore_accent = True
# Case sensitivity behaviour when completing matches
#
# Valid values:
# - off
# - on
# - relaxed
match.ignore_case = relaxed

# Maximum number of rows which "clink-select-complete" can show
#
# If set to zero, the limit is the terminal height.
match.max_rows = 0
# Number of rows to show as a preview with "clink-select-complete"
#
# If set to zero, all rows are shown unless there's too many matches, in which
# case the user will first be prompted.
match.preview_rows = 5

# Sorting behaviour for matching directories relative to files
#
# Valid values:
# - after
# - before
# - with
match.sort_dirs = with

# Perform a substring search if a prefix search finds no completions
match.substring = True

# Translate path separators to be consistent when performing completion
#
# Valid values:
# - off
# - auto
# - system
# - slash
# - backslash
match.translate_slashes = atuo

# Match wildcards ("?" and "*") when performing completion
match.wild = True

# -------------------------- Matching: Executables ----------------------------

# Match executables when completing the first word of a line
exec.enable = True

# Executable matching sources
#
# DOSKEY aliases
exec.aliases = True
# Files with a registered file association
exec.associations = False
# CMD commands
exec.commands = True
# Executables in the current working directory
#
# This matching source is implicitly enabled if the word being completed is a
# relative path or "exec.files" is enabled.
exec.cwd = True
# Directories relative to the current working directory
exec.dirs = True
# Files in the current working directory
exec.files = False
# Executables in directories specified in the %PATH% environment variable
exec.path = True

# Bypass executable matching ("exec.path") if the line begins with whitespace
exec.space_prefix = True

# -------------------------------- Terminal -----------------------------------

# Adjust cursor shape and visibility
#
# The following adjustments are applied:
# - Avoid cursor flicker
# - Produce visible bell effect
# - Show Insert Mode
# - Support ANSI escape codes that adjust cursor shape and visibility
#
# This setting interferes with the Cursor Shape console setting available from
# Windows 10 and Windows Server 2016.
terminal.adjust_cursor_style = True

# Indicates if emojis are drawn using coloured double width characters
#
# Valid values:
# - auto
# - off
# - on
terminal.color_emoji = auto

# Generate special key sequences for Ctrl+H, Ctrl+I, Ctrl+M, and Ctrl+[ to
# enable binding them separately from Backspace, Tab, Enter, and Esc keys.
terminal.differentiate_keys = False

# Method for resolving ambiguous widths of East Asian characters
#
# Overridden by the CLINK_EAST_ASIAN_AMBIGUOUS environment variable.
#
# Valid values:
# - auto
# - font
# - one
# - two
terminal.east_asian_ambiguous = auto

# Perform virtual terminal emulation and handle ANSI escape codes
#
# Valid values:
# - auto
# - emulate
# - native
terminal.emulation = auto

# Respond to mouse input instead of delegating to the terminal
#
# Valid values:
# - auto
# - off
# - on
terminal.mouse_input = auto
# Modifier keys for Clink to respond to mouse input (space-separated)
#
# Overridden by the CLINK_MOUSE_MODIFIER environment variable.
#terminal.mouse_modifier =

# Send a literal escape character on pressing the Esc key
terminal.raw_esc = False

# Display list scrollbars using extended Unicode box drawing characters
terminal.scrollbars = True

# Support Windows' Ctrl+Alt substitute for the AltGr key
terminal.use_altgr_substitute = False

# ------------------------------ Miscellaneous --------------------------------

# Show usage hints provided by argmatchers in the comment row
#
# Only applies wheen "comment_row.show_hints" is enabled.
argmarcher.show_hints = True

# Show input hints in the comment row
comment_row.show_hints = False
# Delay before showing input hints (milliseconds)
comment_row.hint_delay = 500

# Log the raw prompt string generated by prompt filters
debug.log_prompt = False
# Log all terminal input and output
debug.log_terminal = False
# Include callstack when logging output (only with "debug.log_terminal")
debug.log_output_callstacks = False

# Handling of duplicate entries when updating the directory history
#
# Valid values:
# - add
# - erase_prev
directores.dupe_mode = add

# Enhanced DOSKEY macro expansion and word quoting
doskey.enhanced = True

# Include files with the "Hidden" attribute when generating file lists
files.hidden = True
# Include files with the "System" attribute when generating file lists
files.system = False

# Refresh the prompt asynchronously
prompt.async = True
# When to add or remove blank lines before the prompt
#
# Valid values:
# - normal
# - compact
# - sparse
prompt.spacing = normal
# When to collapse previous prompts
#
# Valid values:
# - off
# - same_dir
# - always
prompt.transient = off

# Suppress stderr output from Readline
readline.hide_stderr = False

# Start Clink sessions with the suggestion list enabled
suggestionlist.default = False
